setwd("C:/Users/ADMIN/OneDrive/Documents/Multivariate Statistics/Task 3")
install.packages("fairml")
knitr::opts_chunk$set(echo = TRUE)
library(fairml)
data(package = "fairml")
data(package = "fairml")
data("german.credit")
data(german.credit)
head(german.credit)
View(german.credit)
View(german.credit)
str(german.credit)
library(ggplot2)
ggplot(data = german.credit,
aes(y = Credit_risk,
fill = category))+
geom_bar(stat = 'identity',
width = 1)+
coord_polar("y", start = 0)
library(ggplot2)
ggplot(data = german.credit,
aes(y = Credit_risk))+
geom_bar(stat = 'identity',
width = 1)+
coord_polar("y", start = 0)
library(ggplot2)
ggplot(data = german.credit,
aes(x = '',y = Credit_risk))+
geom_bar(stat = 'identity',
width = 1)+
coord_polar("y", start = 0)
Credit.risk.data = data.frame{Credit_risk = german.credit$Credit_risk, Count = rep(1, nrow(german.credit))}
Credit.risk.data = data.frame(Credit_risk = german.credit$Credit_risk, Count = rep(1, nrow(german.credit)))
library(ggplot2)
ggplot(data = Credit.risk.data,
aes(x = '',y = Credit_risk, fill = Credit_risk))+
geom_bar(stat = 'identity',
width = 1)+
coord_polar("y", start = 0)
library(dplyr)
num_col = select_if(german.credit, as.numeric)
library(dplyr)
num_col = select_if(german.credit, is.numeric)
num_col$Credit_risk = german.credit$Credit_risk
head(num_col)
View(num_col)
fact_col = select_if(german.credit, is.factor)
head(fact_col)
View(fact_col)
unique(german.credit$Account_status)
chisq = function(column){
name = column
tab = table(name = fact_col[[column]],
cred.risk = fact_col$Credit_risk)
print(tab)
print("The chi-squared test")
print(chisq.test(tab))
}
colnames(fact_col)
colnames(fact_col)[-13]
predict.fact.col = colnames(fact_col)[-13]
predict.fact.col
for(col in predict.fact.col){
chisq(col)
}
table(fact_col$Purpose, fact_col$Credit_risk)[BAD >= 5 & GOOD >= 5,]
table(purpose = fact_col$Purpose, cred.risk = fact_col$Credit_risk)[cred.risk$BAD >= 5 & cred.risk$GOOD >= 5,]
a = table(purpose = fact_col$Purpose, cred.risk = fact_col$Credit_risk)
colnames(a) = c("bad", "good")
a = a[,BAD >= 5 & GOOD >= 5]
a = a[,a$bad >= 5 & a$good >= 5]
a = a[,'bad' >= 5 & 'good' >= 5]
a
a = a['bad' >= 5 & 'good' >= 5]
a
a['bad']
a = table(purpose = fact_col$Purpose, cred.risk = fact_col$Credit_risk)
colnames(a) = c("bad", "good")
a['bad']
a[,'bad']
a[,'bad'>=5]
a = a[,'bad'] >= 5
a
a = a[a[,'bad'] >= 5]
a[,1]>=5
a = table(purpose = fact_col$Purpose, cred.risk = fact_col$Credit_risk)
a[,1] = a[,1] >=5
a
a = table(purpose = fact_col$Purpose, cred.risk = fact_col$Credit_risk)
a = subset(a, 1 >= 5 & 2 >= 5)
a
chisq = function(column){
name = column
print(cat("\n\n\n", name, "\n\n\n"))
tab = table(name = fact_col[[column]],
cred.risk = fact_col$Credit_risk)
print(tab)
print("The chi-squared test")
print(chisq.test(tab))
}
for(col in predict.fact.col){
chisq(col)
}
colnames(fact_col)
num.test = function(column){
name = column
print(cat("\n\n\n", name, "\n\n\n"))
t = t.test(fact_col[[column]],
fact_col$Credit_risk)
print("The t-test")
print(t)
}
colnames(num_col)
pred_num = colnames(num_col)[-8]
pred_num
for(col in pred_num){
num.test(col)
}
any(is.na(num_col))
num.test = function(column){
name = column
print(cat("\n\n\n", name, "\n\n\n"))
t = t.test(fact_col[[column]],
fact_col$Credit_risk, var.equal = TRUE)
print("The t-test")
print(t)
}
for(col in pred_num){
num.test(col)
}
t.test(german.credit$Duration, as.numeric(german.credit$Credit_risk), var.equal = TRUE)
num.test = function(column){
name = column
print(cat("\n\n\n", name, "\n\n\n"))
t = t.test(fact_col[[column]],
as.numeric(fact_col$Credit_risk), var.equal = TRUE)
print("The t-test")
print(t)
}
for(col in pred_num){
num.test(col)
}
num.test = function(column){
name = column
print(cat("\n\n\n", name, "\n\n\n"))
t = t.test(num_col[[column]],
as.numeric(fact_col$Credit_risk), var.equal = TRUE)
print("The t-test")
print(t)
}
for(col in pred_num){
num.test(col)
}
num.test = function(column){
name = column
print(cat("\n\n\n", name, "\n\n\n"))
t = kruskal.test(num_col[[column]]~fact_col$Credit_risk)
print("The Kruskal wallis test")
print(t)
}
for(col in pred_num){
num.test(col)
}
colnames(num_col)
target_col = c("Account_status","Credit_history","Saving_bond","Present_employment_since","Other_debtors_guarantors","Property","Other_installment_plan","Housing","Foreign worker","Gender", "Duration","Credit_amount", "Installment_rate", "Age")
data = german.credit[, target_col]
colnames(german.credit)
target_col = c("Account_status","Credit_history","Saving_bond","Present_employment_since","Other_debtors_guarantors","Property","Other_installment_plan","Housing","Foreign worker","Gender", "Duration","Credit_amount", "Installment_rate", "Age")
data = german.credit[target_col]
data = german.credit[,c(Account_status,Credit_history,Saving_bond,Present_employment_since,Other_debtors_guarantors,Property,Other_installment_plan,Housing,Foreign worker,Gender, Duration,Credit_amount, Installment_rate, Age)]
data = german.credit[,c(Account_status,Credit_history,Saving_bond,Present_employment_since,Other_debtors_guarantors,Property,Other_installment_plan,Housing,Foreign_worker,Gender, Duration,Credit_amount, Installment_rate, Age)]
data = german.credit[,c("Account_status","Credit_history","Saving_bond","Present_employment_since","Other_debtors_guarantors","Property","Other_installment_plan","Housing","Foreign_worker","Gender", "Duration","Credit_amount", "Installment_rate", "Age")]
data = subset(german.credit,select = c("Account_status","Credit_history","Saving_bond","Present_employment_since","Other_debtors_guarantors","Property","Other_installment_plan","Housing","Foreign_worker","Gender", "Duration","Credit_amount", "Installment_rate", "Age"))
german.credit[, c("Account_status", "Credit_history")]
a = german.credit[, c("Account_status", "Credit_history")]
View(a)
d = german.credit[,c("Account_status","Credit_history","Saving_bond","Present_employment_since","Other_debtors_guarantors","Property","Other_installment_plan","Housing","Foreign_worker","Gender", "Duration","Credit_amount", "Installment_rate", "Age")]
data = german.credit
d = data[,c("Account_status","Credit_history","Saving_bond","Present_employment_since","Other_debtors_guarantors","Property","Other_installment_plan","Housing","Foreign_worker","Gender", "Duration","Credit_amount", "Installment_rate", "Age")]
colnm
colnames(data)
data = german.credit
d = data[,c("Account_status","Credit_history","Savings_bond","Present_employment_since","Other_debtors_guarantors","Property","Other_installment_plan","Housing","Foreign_worker","Gender", "Duration","Credit_amount", "Installment_rate", "Age")]
data = german.credit
d = data[,c("Account_status","Credit_history","Savings_bonds","Present_employment_since","Other_debtors_guarantors","Property","Other_installment_plans","Housing","Foreign_worker","Gender", "Duration","Credit_amount", "Installment_rate", "Age")]
head(d)
set.seed(222)
n <- nrow(d)
train.ind = sample(1:n, 0.7 * n, replace = FALSE)  # 70% for training
test.ind = setdiff(1:n, train.ind)
train = d[train.ind,]
test = d[test.ind,]
?bartlett.test
bartlett.test(Credit_risk~., data = train)
colnames(train)
data = german.credit
d = data[,c("Credit_risk", "Account_status","Credit_history","Savings_bonds","Present_employment_since","Other_debtors_guarantors","Property","Other_installment_plans","Housing","Foreign_worker","Gender", "Duration","Credit_amount", "Installment_rate", "Age")]
head(d)
bartlett.test(Credit_risk~., data = train)
set.seed(222)
n <- nrow(d)
train.ind = sample(1:n, 0.7 * n, replace = FALSE)  # 70% for training
test.ind = setdiff(1:n, train.ind)
train = d[train.ind,]
test = d[test.ind,]
bartlett.test(Credit_risk~., data = train)
train = lapply(train, as.numeric)
View(train)
train[] = lapply(train, as.numeric)
train = as.data.frame(lapply(train, as.numeric))
bartlett.test(Credit_risk~., data = train)
colnames(train)
bartlett.test(Credit_risk~Account_status+Credit_history+Savings_bonds + Present_employment_since + Other_debtors_guarantors+Property+Other_installment_plans+Housing+Foreign_worker+Gender+Duration+Credit_amount+Installment_rate+Age, data = train)
bartlett.test(Credit_risk~c(Account_status+Credit_history+Savings_bonds + Present_employment_since + Other_debtors_guarantors+Property+Other_installment_plans+Housing+Foreign_worker+Gender+Duration+Credit_amount+Installment_rate+Age), data = train)
train = d[train.ind,]
test = d[test.ind,]
bartlett.test(.~Credit_risk, data = train)
bartlett.test(*~Credit_risk, data = train)
bartlett.test(Account_status+Credit_history+Savings_bonds + Present_employment_since + Other_debtors_guarantors+Property+Other_installment_plans+Housing+Foreign_worker+Gender+Duration+Credit_amount+Installment_rate+Age~Credit_risk, data = train)
bar_test = function(column){
print(paste("Bartlett's test for:", column))
print(bartlett.test(train[[column]], train$Credit_risk))
print("\n\n")
}
pred_col = colnames(train)[2:ncol(train)]
pred_col
pred_col = colnames(train)[2:ncol(train)]
for (col in pred_col){
bar_test(col)
}
bar_test = function(column){
print(paste("Bartlett's test for:", column))
print(bartlett.test(as.numeric(train[[column]]), train$Credit_risk))
print("\n\n")
}
pred_col = colnames(train)[2:ncol(train)]
for (col in pred_col){
bar_test(col)
}
bar_test = function(column){
print(paste("Bartlett's test for:", column))
print(bartlett.test(as.numeric(train[[column]]), train$Credit_risk))
print("\n \n")
}
pred_col = colnames(train)[2:ncol(train)]
for (col in pred_col){
bar_test(col)
}
bar_test = function(column){
print(paste("Bartlett's test for:", column))
print(bartlett.test(as.numeric(train[[column]]), train$Credit_risk))
print("")
print("")
}
pred_col = colnames(train)[2:ncol(train)]
for (col in pred_col){
bar_test(col)
}
bar_test = function(column){
print(paste("Bartlett's test for:", column))
print(bartlett.test(as.numeric(train[[column]]), train$Credit_risk))
cat("\n \n")
}
pred_col = colnames(train)[2:ncol(train)]
for (col in pred_col){
bar_test(col)
}
